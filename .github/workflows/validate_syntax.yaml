name: Validate Sample Syntax
on:
  pull_request:
    paths:
    - 'src/**'
    - 'jsonschema/**'

jobs:
  get-all-files:
    runs-on: ubuntu-latest
    if: ${{ always() }}
    outputs:
      matrix: ${{ steps.get-files.outputs.result }}
    steps:
      - name: Check out repo
        uses: actions/checkout@v3

      - name: Get source files
        uses: actions/github-script@v6
        id: get-files
        with:
          script: |
            const fs = require('fs');
            const Path = require('path');
            const workspace = process.env.GITHUB_WORKSPACE;

            let files = fs.readdirSync(Path.join(workspace, 'src'))
                .map((file) => Path.join('./src', file));
            let connectors = fs.readdirSync(Path.join(workspace, 'src/connectors'))
                .map((file) => Path.join('./src/connectors', file));
            return files.concat(connectors)
                .filter((filename) => filename.endsWith('yaml') || filename.endsWith('json'));

  smoke-test:
    runs-on: ubuntu-latest
    needs: get-all-files
    if: ${{ always() }}
    strategy:
      fail-fast: false
      matrix:
        sample: ${{ fromJSON(needs.get-all-files.outputs.matrix) }}
    steps:
      - name: Check out repo
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3

      - name: Set up tooling
        run: npm install -g ajv-cli ajv-formats

      - name: Run Smoke Tests
        run: |
          ajv validate -c ajv-formats --spec=draft2019 \
            -s jsonschema/workflows.json \
            -d ${{ matrix.sample }}

  test-cases:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repo
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3

      - name: Set up tooling
        run: npm install -g ajv-cli ajv-formats

      - name: Run test cases
        run: |
          for src in $(find jsonschema/tests/ -type f); do
            test=$(ajv validate -c ajv-formats --spec=draft2019 \
              -s jsonschema/workflows.json \
              -d $src)

            if [[ $? -ne 1 ]]; then
              echo "$src did not fail as expected!" | tee -a /workspace/failures.txt
              echo $test | tee -a /workspace/failures.txt
              echo ""
            fi
          done

      - name: Check for failures
        run: |
          if [ -f /workspace/failures.txt ]; then
              echo "Tests FAILED!"
              exit 1
          else 
              echo "Tests PASSED!"
          fi